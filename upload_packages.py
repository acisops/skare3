"""Upload packages in current environment to upstream repo provider"""

import argparse
import getpass
import os
import shutil
import subprocess
import json
from pathlib import Path, PurePosixPath
import platform
import tempfile

import paramiko


def get_opt():
    parser = argparse.ArgumentParser(description="Upload Ska Conda packages")

    parser.add_argument('packages', metavar='package', type=str, nargs='*',
                        help="Package to upload (default=all packages)")
    parser.add_argument("--host", type=str, default=None,
                        help="Remote host name (default=None (local repo)")
    parser.add_argument("--user", type=str, default="aca",
                        help="Remote user name (default='aca'")
    parser.add_argument("--repo-dir",
                        type=str,
                        help="Root dir for conda package repository")
    parser.add_argument("--dry-run",
                        action="store_true",
                        help="Dry run, do not actually upload files")
    parser.add_argument("--force",
                        action="store_true",
                        help="Force package upload even if it exists")

    args = parser.parse_args()
    return args


def process_packages(args, sftp):
    pkgs_dir = Path(os.environ['CONDA_PREFIX_1']) / 'pkgs'

    result = subprocess.run(['conda', 'list', '--no-pip', '--json'], stdout=subprocess.PIPE)
    pkgs_json = result.stdout
    pkgs = json.loads(pkgs_json)

    repodata = {}
    for pkg in pkgs:
        if not args.packages or pkg['name'] in args.packages:
            pkgdata = process_package(args, sftp, pkgs_dir, pkg)
            repodata[pkgdata['fn']] = pkgdata

    # Put the dict of repo data o the remote location. This allows building
    # ska3-flight / ska3-core meta package lists and fixing repodata.json that
    # get generated by conda index which might be wrong. See:
    # https://github.com/ContinuumIO/anaconda-issues/issues/11920
    platform_map = {'Windows': 'win-64', 'Darwin': 'osx-64', 'Linux': 'linux-64'}
    arch = platform_map[platform.system()]
    remote_repodata = PurePosixPath(args.repo_dir, f'repodata_{arch}.json')
    with tempfile.NamedTemporaryFile('wt') as local_repodata:
        json.dump(repodata, local_repodata, sort_keys=True, indent=4)
        local_repodata.flush()
        print(f'Putting {remote_repodata}')
        sftp.put(local_repodata.name, remote_repodata)


def process_package(args, sftp, pkgs_dir, pkg):
    pkg_defs_dir = Path.cwd() / 'pkg_defs'
    pkg_dir = pkgs_dir / pkg['dist_name']
    pkgdata = json.load(open(pkg_dir / 'info' / 'repodata_record.json'))
    platform = pkg['platform']  # noarch, win-64 etc
    name = pkg['name']
    filename = pkgdata['fn']
    pkg_file = pkgs_dir / filename

    if not pkg_file.exists():
        raise FileNotFoundError(f'file {pkg_file} not found')

    lstat = pkg_file.stat()
    remote_pkg = PurePosixPath(args.repo_dir, platform, filename)
    try:
        print(f'Checking for {remote_pkg} in repository ...', end='')
        rstat = sftp.stat(str(remote_pkg))
    except Exception:
        exists = False
    else:
        exists = rstat.st_size == lstat.st_size

    if not exists or args.force:
        print()
        print(f'  Uploading {filename}')
        if not args.dry_run:
            sftp.put(str(pkg_file), str(remote_pkg))
    else:
        print('already exists')

    # Add indicator of whether this is a Ska package, i.e. if we built it. This
    # only impacts whether the package ends up in ska3-flight or ska3-core.
    pkgdata['is_ska'] = (pkg_defs_dir / name).exists()

    return pkgdata


class LocalSFTP:
    """Stub a couple of methods of the paramiko SFTP for local files.
    """
    def stat(self, path):
        return os.stat(path)

    def put(self, src, dest):
        shutil.copy(src, dest)


def main():
    args = get_opt()

    if args.host:
        password = getpass.getpass(f'Password for {args.user}: ')

        with paramiko.SSHClient() as ssh_client:
            ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh_client.connect(hostname=args.host, username=args.user, password=password)

            with ssh_client.open_sftp() as sftp:
                process_packages(args, sftp)
    else:
        local_sftp = LocalSFTP()
        for subdir in ('noarch', 'win-64', 'linux-64', 'osx-64'):
            Path(args.repo_dir, subdir).mkdir(parents=True, exist_ok=True)
        process_packages(args, local_sftp)


if __name__ == '__main__':
    main()
